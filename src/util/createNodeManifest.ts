import {Actions, Node, SourceNodesArgs} from 'gatsby'
import debug from '../debug'
import {SanityInputNode} from '../types/gatsby'

const ONE_WEEK = 1000 * 60 * 60 * 24 * 7 // ms * sec * min * hr * day
let nodeManifestWarningWasLogged: boolean

export default function createNodeManifest(
  actions: Actions,
  args: SourceNodesArgs,
  node: SanityInputNode,
  publishedId: string,
) {
  // @TODO: debug createNodeManifest
  return
  try {
    const {unstable_createNodeManifest} = actions as Actions & {
      unstable_createNodeManifest: (props: {manifestId: string; node: Node}) => void
    }
    const {getNode} = args
    const type = node.internal.type
    const autogeneratedTypes = ['SanityFileAsset', 'SanityImageAsset']

    const createNodeManifestIsSupported = typeof unstable_createNodeManifest === 'function'
    const nodeTypeNeedsManifest = autogeneratedTypes.includes(type) === false
    const shouldCreateNodeManifest = createNodeManifestIsSupported && nodeTypeNeedsManifest

    if (shouldCreateNodeManifest) {
      const updatedAt = new Date((node._updatedAt as string) || Date.now())
      const nodeWasRecentlyUpdated =
        Date.now() - updatedAt.getTime() <=
        // Default to only create manifests for items updated in last week
        (process.env.CONTENT_SYNC_SANITY_HOURS_SINCE_ENTRY_UPDATE || ONE_WEEK)
      if (!nodeWasRecentlyUpdated) return

      const nodeForManifest = getNode(node.id) as Node
      const manifestId = `${publishedId}-${updatedAt.toISOString()}`

      unstable_createNodeManifest({manifestId, node: nodeForManifest})
    } else if (!createNodeManifestIsSupported && !nodeManifestWarningWasLogged) {
      args.reporter.warn(
        `Sanity: Your version of Gatsby core doesn't support Content Sync (via the unstable_createNodeManifest action). Please upgrade to the latest version to use Content Sync in your site.`,
      )
      nodeManifestWarningWasLogged = true
    }
  } catch (e) {
    let result = (e as Error).message
    debug(`Cannot create node manifest`, result)
  }
}
